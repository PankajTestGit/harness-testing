service:
  name: remote-test-service
  identifier: remotetestservice
  orgIdentifier: default
  projectIdentifier: Pankaj
  serviceDefinition:
    spec:
      artifacts:
        primary:
          primaryArtifactRef: <+input>
          sources:
            - spec:
                connectorRef: account.GCP_XXX
                imagePath: <+input>.allowedValues(image1,imag2)
                tag: <+input>.allowedValues(tag1,tag2)
                registryHostname: <+input>.allowedValues(k8s.gcr.io,mirror.gcr.io,eu.gcr.io)
              identifier: GCR
              type: Gcr
            - spec:
                connectorRef: account.Audit_Event_Streaming
                imagePath: <+input>.allowedValues(image1,image2)
                tag: <+input>.allowedValues(tag1,tag2)
                region: <+input>.allowedValues(eu-west-2,eu-west-1,us-west-2)
              identifier: ECR
              type: Ecr
            - spec:
                connectorRef: account.PrateekNXS001
                repository: <+input>.allowedValues(repo1,repo2)
                repositoryFormat: docker
                tag: <+input>.allowedValues(atg1,tag2)
                spec:
                  artifactPath: <+input>.allowedValues(path1,path2)
                  repositoryUrl: <+input>.allowedValues(url1,url2)
              identifier: Nexus3_Docker
              type: Nexus3Registry
            - spec:
                connectorRef: account.PrateekNXS001
                repository: <+input>.allowedValues(repository1,repository2)
                repositoryFormat: maven
                tag: <+input>.allowedValues(atg1,tag2)
                spec:
                  artifactId: <+input>.allowedValues(artifactId1,artifactId2)
                  groupId: <+input>.allowedValues(groupId1,groupid2)
                  extension: <+input>.allowedValues(extension1,estension2)
                  classifier: <+input>.allowedValues(classifier1,classifier2)
              identifier: Nexus3_Maven
              type: Nexus3Registry
            - spec:
                connectorRef: account.PrateekNXS001
                repository: <+input>.allowedValues(repo1,repo2)
                repositoryFormat: npm
                tag: <+input>.allowedValues(atg1,tag2)
                spec:
                  packageName: <+input>.allowedValues(packageName1,packageName2)
              identifier: Nexus3_NPM
              type: Nexus3Registry
            - spec:
                connectorRef: account.PrateekNXS001
                repository: <+input>.allowedValues(repo1,repo2)
                repositoryFormat: nuget
                tag: <+input>.allowedValues(atg1,tag2)
                spec:
                  packageName: <+input>.allowedValues(PackageName1,PackageName2)
              identifier: Nexus3_NuGet
              type: Nexus3Registry
            - spec:
                connectorRef: account.PrateekNXS001
                repository: <+input>.allowedValues(repo1,repo2)
                repositoryFormat: raw
                tag: <+input>.allowedValues(atg1,tag2)
                spec:
                  group: <+input>.allowedValues(Group1,Group2)
              identifier: Nexus3_Raw
              type: Nexus3Registry
            - spec:
                connectorRef: account.harness_jfrog_artifactory
                artifactPath: <+input>.allowedValues(artifactPath1,artifactPath2)
                tag: <+input>.allowedValues(tag1,tag2)
                repository: Repository
                repositoryUrl: <+input>.allowedValues(repositoryUrl1,repositoryUrl2)
                repositoryFormat: docker
              identifier: Artifactory
              type: ArtifactoryRegistry
            - identifier: Custom
              spec:
                version: <+input>.allowedValues(version1,version2)
              type: CustomArtifact
            - identifier: Custom_Dynamic
              spec:
                version: <+input>.allowedValues(version1,version2)
                timeout: <+input>.allowedValues(10m,20m)
                delegateSelectors: <+input>.allowedValues(delegateSelectors1,delegateSelectors2)
                scripts:
                  fetchAllArtifacts:
                    artifactsArrayPath: <+input>.allowedValues(artifactsArrayPath1,artifactsArrayPath2)
                    versionPath: <+input>.allowedValues(versionPath1,versionPath2)
                    spec:
                      shell: Bash
                      source:
                        spec:
                          script: echo 1
                        type: Inline
              type: CustomArtifact
            - spec:
                connectorRef: account.testAzureConnectordr0Q9gATlw
                tag: <+input>.allowedValues(tag1,tag2)
                subscriptionId: <+input>.allowedValues(subscriptionId1,12d2db62-5aa9-471d-84bb-faa489b3e319)
                registry: <+input>.allowedValues(registry1,registry2)
                repository: <+input>.allowedValues(repository1,repository2)
              identifier: ACR
              type: Acr
            - identifier: GoogleArtifactRegistry
              spec:
                connectorRef: account.GCP_XXX
                repositoryType: docker
                project: <+input>.allowedValues(project1,project2)
                region: <+input>.allowedValues(asia-southeast1,asia-south2)
                repositoryName: <+input>.allowedValues(repositoryName1,repositoryName2)
                package: <+input>.allowedValues(package1,package2)
                version: <+input>.allowedValues(version1,version2)
              type: GoogleArtifactRegistry
            - identifier: GithubPackageRegistry
              spec:
                connectorRef: account.ghKuberneter
                org: <+input>.allowedValues(org1,org2)
                packageName: <+input>.allowedValues(packageName1,packageName2)
                packageType: container
                version: <+input>.allowedValues(version1,version2)
              type: GithubPackageRegistry
            - spec:
                connectorRef: account.Harness_DockerHub
                imagePath: <+input>.allowedValues(imagePath1,imagePath2)
                tag: <+input>.allowedValues(tag1,tag2)
                digest: <+input>.allowedValues(digest1,digest2)
              identifier: DockerRegistryArtifact
              type: DockerRegistry
      manifests:
        - manifest:
            identifier: test
            type: K8sManifest
            spec:
              store:
                type: Git
                spec:
                  connectorRef: account.GitAccHttpConnectorForAutomationTest
                  gitFetchType: Branch
                  paths:
                    - /
                  repoName: <+input>.allowedValues(a-repo,b-repo)
                  branch: <+input>.allowedValues(a-branch,b-branch)
              skipResourceVersioning: false
              enableDeclarativeRollback: false
      variables:
        - name: Var1
          type: String
          description: Test
          required: true
          value: <+input>
    type: Kubernetes
